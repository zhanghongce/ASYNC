/* Generated by Yosys 0.9 (git sha1 1979e0b) */

(* keep =  1  *)
(* top =  1  *)
(* src = "test.v:4" *)
module counter(clk, count);
  (* src = "test.v:15" *)
  wire _00_;
  (* src = "test.v:17" *)
  wire _01_;
  (* src = "test.v:19" *)
  wire _02_;
  (* src = "test.v:21" *)
  wire _03_;
  (* init = 1'h0 *)
  wire _04_;
  (* init = 1'h0 *)
  wire _05_;
  (* init = 1'h0 *)
  wire _06_;
  (* init = 1'h0 *)
  wire _07_;
  (* init = 1'h0 *)
  wire _08_;
  (* init = 1'h0 *)
  wire _09_;
  (* init = 1'h0 *)
  wire _10_;
  (* init = 1'h0 *)
  wire _11_;
  (* init = 1'h0 *)
  wire _12_;
  (* init = 1'h0 *)
  wire _13_;
  (* init = 1'h0 *)
  wire _14_;
  (* init = 1'h0 *)
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  (* src = "test.v:24" *)
  wire _20_;
  (* src = "test.v:16" *)
  wire _21_;
  (* src = "test.v:18" *)
  wire _22_;
  (* src = "test.v:20" *)
  wire _23_;
  (* src = "test.v:22" *)
  wire _24_;
  (* src = "test.v:5" *)
  input clk;
  (* src = "test.v:6" *)
  output [3:0] count;
  (* src = "test.v:10" *)
  wire less_9;
  always @* if (1'h1) assert(_20_);
  
  reg _04_ff;
  always @(posedge clk) begin
  _04_ff<=count[2];
  end
  initial _04_ff=0;
  assign _04_=_04_ff;

  reg _05_ff;
  always @(posedge clk) begin
  _05_ff<=count[1];
  end
  initial _05_ff=0;
  assign _05_=_05_ff;
  
  reg _06_ff;
  always @(posedge clk) begin
  _06_ff<=coount[0];
  end
  initial _06_ff=0;
  assign _06_=_06_ff;
  
  reg _07_ff;
  always @(posedge clk) begin
  _07_ff<=clk;
  end 
  initial _07_ff=0;
  assign _07_=_07_ff;
  

  assign _16_ = { count[2], _04_ } === 2'h1;
  assign _17_ = { count[1], _05_ } === 2'h1;
  assign _18_ = { count[0], _06_ } === 2'h1;
  assign _19_ = { clk, _07_ } === 2'h1;
  
    
  reg _08_ff;
  always @(posedge clk) begin
  _08_ff<=_03_;
  end 
  initial _08_ff=0;
  assign _08_=_08_ff;
    
  reg _09_ff;
  always @(posedge clk) begin
  _09_ff<=_02_;
  end 
  initial _09_ff=0;
  assign _09_=_09_ff;

  reg _10_ff;
  always @(posedge clk) begin
  _10_ff<=_01_;
  end 
  initial _10_ff=0;
  assign _10_=_10_ff;

  reg _11_ff;
  always @(posedge clk) begin
  _11_ff<=_00_;
  end 
  initial _11_ff=0;
  assign _11_=_11_ff;
  
  reg _12_ff;
  always @(posedge clk) begin
  _12_ff<=count[3];
  end 
  initial _12_ff=0;
  assign _12_=_12_ff;
 
   reg _13_ff;
  always @(posedge clk) begin
  _13_ff<=count[2];
  end 
  initial _13_ff=0;
  assign _13_=_13_ff;
  
    reg _14_ff;
  always @(posedge clk) begin
  _14_ff<=count[1];
  end 
  initial _14_ff=0;
  assign _14_=_14_ff;
  
     reg _15_ff;
  always @(posedge clk) begin
  _15_ff<=count[0];
  end 
  initial _15_ff=0;
  assign _15_=_15_ff;
  
 
   reg count3_ff,count2_ff,count1_ff,count0_ff;
   wire count3_ff_enable,count2_ff_enable,count1_ff_enable,count0_ff_enable;
   always @(posedge clk) begin
   if(count3_ff_enable)
    count3_ff<=_16_ ? _08_ : _12_;
   if(count2_ff_enable)
    count2_ff<=_17_ ? _09_ : _13_;
   if(count1_ff_enable)
    count1_ff<=_18_ ? _10_ : _14_;
   if(count0_ff_enable)
    count0_ff<=_19_ ? _11_ : _15_;
   end
 initial count3_ff=0;
 initial count2_ff=0;
 initial count1_ff=0;
 initial count0_ff=0;
   

  assign count[3] = count3_ff;
  assign count[2] = count2_ff;
  assign count[1] = count1_ff;
  assign count[0] = count0_ff;
  assign _20_ = count <= (* src = "test.v:24" *) 4'h9;
  
  reg less_9_ff;
  wire less_9_ff_enable;
  always @(posedge clk) begin
  if(less_9_ff_enable)
  less_9_ff<=count < (* src = "test.v:10" *) 4'h9;
  end
  initial less_9_ff=0;
  assign less_9 = less_9_ff;
  assign _21_ = ~ (* src = "test.v:16" *) count[0];
  assign _22_ = ~ (* src = "test.v:18" *) count[1];
  assign _23_ = ~ (* src = "test.v:20" *) count[2];
  assign _24_ = ~ (* src = "test.v:22" *) count[3];
  assign _00_ = less_9 ? (* src = "test.v:16" *) _21_ : 1'h0;
  assign _01_ = less_9 ? (* src = "test.v:18" *) _22_ : 1'h0;
  assign _02_ = less_9 ? (* src = "test.v:20" *) _23_ : 1'h0;
  assign _03_ = less_9 ? (* src = "test.v:22" *) _24_ : 1'h0;
endmodule